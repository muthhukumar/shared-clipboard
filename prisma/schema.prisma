// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ClipboardContent {
  title     String
  content   String
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userEmail], references: [email])
  userEmail String
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  email             String             @unique
  id                String             @unique @default(uuid())
  name              String?
  profileUrl        String?
  clipboardContents ClipboardContent[]
  todos             Todo[]
  votes             Vote[]
  birthdays         Birthday[]
  labels            Label[]
  quickContent      String?
  quickRedirect     String?
}

model Vote {
  title     String
  id        Int       @id @default(autoincrement())
  votes     Int       @default(0)
  upvotes   Int       @default(0)
  downvotes   Int       @default(0)
  User      User?     @relation(fields: [userEmail], references: [email])
  userEmail String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  label     String?
}

model Birthday {
  id        Int     @id @default(autoincrement())
  name      String
  date      String
  User      User?   @relation(fields: [userEmail], references: [email])
  userEmail String?
}

model Todo {
  title       String
  id          String         @unique @default(uuid())
  description String?
  completed   Boolean        @default(false)
  dueDate     String
  User        User           @relation(fields: [userEmail], references: [email])
  userEmail   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  priority    Priority       @default(NORMAL)
  labels      LabelsOnTodo[]
}

model Label {
  id        Int            @id @default(autoincrement())
  label     String
  User      User?          @relation(fields: [userEmail], references: [email])
  userEmail String?
  todos     LabelsOnTodo[]
}

model LabelsOnTodo {
  Todo    Todo?  @relation(fields: [todoId], references: [id])
  todoId  String
  Label   Label? @relation(fields: [labelId], references: [id])
  labelId Int
  id      Int    @id @default(autoincrement())
}

enum Priority {
  HIGH
  LOW
  MEDIUM
  NORMAL
}
