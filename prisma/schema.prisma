// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ClipboardContent {
  title     String
  content   String
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userEmail], references: [email])
  userEmail String
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  email              String             @unique
  id                 String             @unique @default(uuid())
  name               String?
  profileUrl         String?
  clipboardContents  ClipboardContent[]
  todos              Todo[]
  shortURLs          ShortURL[]
  votes              Vote[]
  labels             Label[]
  quickContent       String?
  quickRedirect      String?
  isTodoPublic       Boolean            @default(false)
  isHabitsRankPublic Boolean            @default(false)
  UniqueReference    UniqueReference?
  friends            Friend[]
}

model Vote {
  title       String
  id          Int          @id @default(autoincrement())
  upvotes     Int          @default(0)
  downvotes   Int          @default(0)
  User        User?        @relation(fields: [userEmail], references: [email])
  userEmail   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  label       String?
  shareWith   ShareOption? @default(PRIVATE)
  isArchived Boolean      @default(false)
}

model Todo {
  title       String
  id          String         @unique @default(uuid())
  description String?
  completed   Boolean        @default(false)
  dueDate     String
  User        User           @relation(fields: [userEmail], references: [email])
  userEmail   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  priority    Priority       @default(NORMAL)
  labels      LabelsOnTodo[]
  event       Event?
}

model Label {
  id        Int            @id @default(autoincrement())
  label     String
  User      User?          @relation(fields: [userEmail], references: [email])
  userEmail String?
  todos     LabelsOnTodo[]
}

model LabelsOnTodo {
  Todo    Todo?  @relation(fields: [todoId], references: [id])
  todoId  String
  Label   Label? @relation(fields: [labelId], references: [id])
  labelId Int
  id      Int    @id @default(autoincrement())
}

enum Priority {
  HIGH
  LOW
  MEDIUM
  NORMAL
}

enum ShareOption {
  PRIVATE
  PUBLIC
  FRIENDS
}

model ShortURL {
  title     String
  url       String
  slug      String    @unique
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  User      User?     @relation(fields: [userEmail], references: [email])
  userEmail String?
}

model Event {
  id     Int    @id @default(autoincrement())
  Todo   Todo   @relation(fields: [todoId], references: [id])
  todoId String @unique

  repeatStart    Int
  repeatInterval Int?
  repeatYear     Int?
  repeatMonth    Int?
  repeatDay      Int?
  repeatWeek     Int?
  repeatWeekday  Int?
  repeatEnd      Int
}

model Stack {
  id Int @id @default(autoincrement())
}

model UniqueReference {
  personalId String @unique @default(cuid())
  id         String @id @default(uuid())
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique
}

enum Status {
  Pending
  Accepted
  Rejected
}

model Friend {
  id String @id @default(uuid())

  requestFrom String
  requestTo   String

  status Status @default(Pending)

  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String


  @@unique([requestFrom, requestTo])
}
